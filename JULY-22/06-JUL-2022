#definitions
1. types
2. messages
3. portType
4. bindings
5. service
	- port
--------------------------------------------------------------------------------------------
How to develop a webservice using contract-first approach?
In case of contract-first approach the development of the webservice starts from wsdl document.
#1. write wsdl document
#2. generate binding classes
	2.1 write config.xml 
	<config>
		<wsdl location="WebContent/WEB-INF/PolicyManager.wsdl"
			package="com.lic.service"/>
	</config>
	2.2 run the wscompile tool by passing config.xml as an input
	|-config.xml
	wscompile
	| -d src
	| -gen:server
	| -keep
	| -verbose
	| -model model-rpc-enc.xml.gz
	
	2.3 it generates the binding classes and parser classes
	
	|-config.xml
	wscompile
	|-Input/Output parameter/returnType classes
	|-SEI interface
	|-RequestStruct/ResponseStruct
	|-SoapSerializers/SoapBuilders
	|-Tie
	|-Model
	|-WSDL
	
#3. drag and drop wsdl/model into WEB-INF/ directory
#4. write implementation class for the sei interface with business logic we wanted to exposed to the partners
#5. bind the webservice with an url pattern by writing jaxrpc-ri.xml
<webservices targetNamespaceBase=""
	typeNamespaceBase=""
	urlPatternBase="">
	
	<endpoint name=""
	interfaceName=""
	implementation=""
	model=""
	wsdl""/>
	
	<endpointMapping name=""
	urlPattern=""/>
</webservices>
	
#6. we need additional configuration files to deploy the web service which has to be generated by using wsdeploy tool
	6.1 export the project as war file
	6.2 run the wsdeploy tool by passing war as an input, it generates output war
	6.3 extract the output war and copy jaxrpc-ri-runtime.xml and web.xml into the WEB-INF/ directory of the project
#7. deploy the project and access the webservice


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	





















