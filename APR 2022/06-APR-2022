distributed technology is not an api or programming language rather it is an methodology that defines set of rules and guidelinesses that should be followed in building the software applications. So that these software applications and their components can be dis-jointly located on different machines and can communicate over the network 

To support building software applications based on distributed technology, languages has to provide apis or libraries of their own.

The Sun Microsystems as part of the java platform has provided quite a number of apis in support in building the applications based on distributed technology. There are 5 different apis are provided.
	1. corba
	2. rmi
	3. ejb
	4. soap webservices
	5. restful services
	
#1. corba
corba stands for "common object request broker architecture", it is the first api provided as apart of the java language to support distributed technology.
One of the biggest feature or provide that java has made interms of corba is, it supports building distributed programs in any language.
	
Since corba supports building distributed application in multiple languages, dont build the application from java code, rather define the interfaces/skeleton structure of the component in a language called IDL.
	
IDL stands for interface definition language, in which we need to define interfaces of the component we want to expose over the network

Pass the IDL file as an input to the Corba compiler along with language in which we want corba compiler to generate the code
Now the corba compiler generates the source code in the language we specified along with network wrapper around the component
Now we need to write the business logic into the class that has been generated by the corba compiler
After writing the business logic, compile the class with java compiler.	we need to package the classes into an special packaging standard provided by corba
deploy this corba package into an message oriented middleware called "cobra container/server" and start it to make your component accessible.
	
dis-advantages with corba technology:
1. it only supports java and c++ languages to be build as distributed components and doesnt adds support for any other languages
2. The procedure we need to follow in building the corba application is completely different from the way we build any java application, that makes most of the people feel challenging and difficult to work with
3. I never knew about an packaging standard, and have ever packaged any applications till now
5. The corba server is something that is really new and deploying is a faily new concept
6. Corba Servers are not opensource, and even people around the market are pretty new towards distributed technology, so there are not keen in investing something where they dont know what is it all about

putting these things together has made the corba to be considered as an heavy weight and the ever complex api produced as apart of the java language

To overcome the above problems with corba, sun microsystems has to provide an alternate api in java language insupport of building distributed technology applications in java, that is where "RMI" has been introduced

#2. RMI 
RMI stands for remote method invocation, its an api provide by sun microsystems in buidling distributed applications in java language. The RMI has been designed by the sun microsystems carefully to eliminate most of the problems we have while working with Corba api



















	
	
	















	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	















