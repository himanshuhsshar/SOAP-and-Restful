drawbacks of corba:
-----------------------
1. corba supports only java and c++ languages only even though it has promised to support many other languages
2. the development of corba application is quite different from the way we develop java language applications
	1. dont write java class, rather define the skeleton information about the component in an idl file which is pretty much new to the java developers 
	2. there is no compiler apart from java compiler developer knows, but corba has introduced an additional compiler called corba compiler, which generates magically the source code rather than bytecode of the classes
	3. developers has to write the logic inside the code that is generated by the compiler rather than creating their own classes
	4. packaging an application seems to be new and is not aware by many people
3. The MOM (Message Oriented Middleware) or Corab Server is new to many people and should buy license in using it, monitoring, administering and deploying the applications on these servers are seems to be new and felt complex and overhead by many people
Keeping it altogether corba seems to quite complex to adopt and difficult maintain the applications, so need an alternate for corba which is "RMI".
----------------------------------------------------------------------------------------
	
RMI:
RMI stands for "remote method invocation", it has been designed keeping in view of eliminating most of the drawbacks that are there in corba technology

1. While working with RMI we need to directly start writing java class and write logic within our class. after completing the code, we need to compile our code using rmic compiler which is similar to java compiler only

2. The rmic compiler compiles the source code of our application along with it generates the network wrapper around our class, to expose it as an distributed component

3. package your classes into traditional java packaging standard as "jar"
4. bind your object to the rmiregistry with a name, so that your object will be accessible over the network 

rmiregistry is an rmi server that is shipped as part of jdk install. it doesnt require any special configuration or setup. no need to monitor or administor or deploy the applications on rmiregistry.
developer has to write code for binding the object to the rmi registry with a name to make the component accessible over the network

advantages:-
1. it eliminated all of the challenges that we have while working with corba, it exactly matches a typical java application development procedure, so developer find it very easy to work with rmi technology
2. no commercial servers, no configurations, monitoring or administrations which eliminates the maintains overhead and cost of running the distributed application

Ejb
---
EJB stands for "enterprise java beans" it is an api provided by the sun microsystems to build enterprise distributed components as part of jee platform


	













	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	